@inject CurrentUserService CurrentUser

@if (CurrentUser.IsLoggedIn)
{
    <div class="text-white text-end">
        <div>@CurrentUser.CompanyName</div>
        <small>
            @CurrentUser.Username
            <img class="small-icon"
                 src="images/@(IsActive ? "activeClock.svg" : "inactiveClock.svg")"
                 title="@GetActivityStatus()"
                 alt="Status" />
        </small>

    </div>
}

@code {
    protected override void OnInitialized()
    {
        CurrentUser.OnChange += OnUserChanged;
    }

    private void OnUserChanged()
    {
        InvokeAsync(StateHasChanged);
    }

    private string GetActivityStatus()
    {
        if (CurrentUser.LastActivity == null) return "Status unknown";

        var lastUtc = DateTime.SpecifyKind(CurrentUser.LastActivity.Value, DateTimeKind.Utc);
        var now = DateTime.UtcNow;
        var diff = now - lastUtc;

        var minutes = (int)Math.Floor(diff.TotalMinutes);
        return minutes < 1
            ? "Active"
            : $"Last seen {minutes} minute{(minutes != 1 ? "s" : "")} ago";
    }

    private bool IsActive =>
        CurrentUser.LastActivity.HasValue &&
        (DateTime.UtcNow - DateTime.SpecifyKind(CurrentUser.LastActivity.Value, DateTimeKind.Utc)).TotalMinutes < 1;

    public void Dispose()
    {
        CurrentUser.OnChange -= OnUserChanged;
    }
}