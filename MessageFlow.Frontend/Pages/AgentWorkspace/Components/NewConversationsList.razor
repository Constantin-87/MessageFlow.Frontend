@using System.ComponentModel.DataAnnotations
@rendermode RenderMode.InteractiveWebAssembly
@inject AuthenticationStateProvider AuthenticationStateProvider

<div class="new-conversations-list">
    <h4>New Conversations</h4>
    @if (isLoading)
    {
        <LoadingIndicator Message="Loading conversations..." IsDark="false" />
    }
    else if (FilteredConversations != null && FilteredConversations.Any())
    {
        <ul>
            @foreach (var vm in FilteredConversations)
            {
                <li>
                    <div class="conversation-meta">
                        <img src="@vm.GetSourceIcon()" alt="@vm.GetSourceAltText()" class="small-icon" />
                        @ShortenedUsername(vm.Conversation.SenderUsername)
                    </div>
                    <button class="btn btn-sm btn-primary" @onclick="async () => await AssignToSelf(vm)">Assign</button>
                </li>
            }
        </ul>
    }
    else
    {
        <p>No new conversations.</p>
    }
</div>

@code {
    [Parameter, Required] public string? UserId { get; set; }
    [Parameter, Required] public string? TeamId { get; set; }
    [Parameter, Required] public HubConnection HubConnection { get; set; }

    private List<ConversationVM> Conversations = new();
    private bool isLoading = true;
    private IEnumerable<ConversationVM> FilteredConversations =>
    string.IsNullOrEmpty(TeamId)
        ? Conversations
        : Conversations.Where(vm => vm.Conversation.AssignedTeamId == TeamId);

    private bool _handlersRegistered = false;

    protected override void OnInitialized()
    {
        if (!_handlersRegistered && HubConnection != null)
        {
            RegisterHandlers();
            _handlersRegistered = true;
        }
    }

    public void RegisterHandlers()
    {
        if (HubConnection != null)
        {
            HubConnection.On<ConversationDTO>("NewConversationAdded", (conversation) =>
            {
                AddConversation(conversation);
            });

            HubConnection.On<ConversationDTO>("RemoveNewConversation", (conversation) =>
            {
                RemoveConversation(conversation);
            });

            HubConnection.On<List<ConversationDTO>>("LoadNewConversations", (newConversations) =>
           {
               LoadNewConversations(newConversations);
           });
        }
    }

    public void LoadNewConversations(List<ConversationDTO> dtoList)
    {
        isLoading = true;
        Conversations.Clear();

        foreach (var dto in dtoList)
        {
            AddConversation(dto);
        }
        isLoading = false;
        StateHasChanged();
    }

    public void AddConversation(ConversationDTO dto)
    {
        if (!Conversations.Any(c => c.Conversation.Id == dto.Id))
        {
            Conversations.Add(new ConversationVM(dto));
        }
        StateHasChanged();
    }

    public void RemoveConversation(ConversationDTO dto)
    {
        if (dto != null)
        {
            Conversations.RemoveAll(c => c.Conversation.Id == dto.Id);
            StateHasChanged();
        }
    }

    private async Task AssignToSelf(ConversationVM vm)
    {
        if (HubConnection is not null)
        {
            vm.Conversation.IsAssigned = true;
            vm.Conversation.AssignedUserId = UserId;

            await HubConnection.SendAsync("AssignConversationToUser", vm.Conversation.Id);
            Conversations.Remove(vm);
        }
        else
        {
            Console.WriteLine("hubConnection or UserId is null. Cannot assign conversation.");
        }
    }

    private string ShortenedUsername(string? name)
    {
        if (string.IsNullOrEmpty(name)) return string.Empty;
        return name.Length > 10 ? name.Substring(0, 10) + "..." : name;
    }
}