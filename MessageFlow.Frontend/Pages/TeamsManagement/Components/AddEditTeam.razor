@inject UserManagementService UserManagementService
@inject TeamsManagementService TeamsManagementService
@rendermode RenderMode.InteractiveWebAssembly

<div class="border p-3 mb-3">
    <h5>@(NewTeam ? "Create New Team" : $"Edit Team: {Team?.TeamName}")</h5>

    <div class="row">
        <div class="col-md-6">
            <!-- Team Name -->
            <div class="mb-3 max-300">
                <label class="form-label">Team Name:</label>
                <input @bind="teamName" class="form-control" placeholder="Enter Team Name" />
            </div>

            <!-- Team Description -->
            <div class="mb-3">
                <label class="form-label">Team Description:</label>
                <textarea @bind="teamDescription" class="form-control" rows="3" placeholder="Enter Team Description"></textarea>
            </div>
        </div>

        <div class="col-md-6">
            <div class="d-flex gap-3">

                <!-- Available Users -->
                <div class="d-flex flex-column col-4">
                    <label class="form-label">Available Users:</label>
                    <div class="border p-2 scrollable-list-container scrollable">
                        @if (IsLoadingAvailableUsers)
                        {
                            <LoadingIndicator Message="Loading users..." IsDark="false" />
                        }
                        else if (!availableUsers.Any())
                        {
                            <p class="text-muted">No other users.</p>
                        }
                        else
                        {
                            <ul class="list-group">
                                @foreach (var user in availableUsers)
                                {
                                    <li class="list-group-item @(selectedAvailableUsers.Contains(user) ? "active" : "")"
                                        @onclick="@(() => ToggleAvailableUserSelection(user))">
                                        @user.UserName
                                    </li>
                                }
                            </ul>
                        }
                    </div>
                </div>

                <!-- Add/Remove Buttons -->
                <div class="d-flex flex-column justify-content-center align-items-center col-2">
                    <button class="btn btn-primary mb-2 add-remove-usr-btn" @onclick="AddUserToTeam">Add User</button>
                    <button class="btn btn-danger add-remove-usr-btn" @onclick="RemoveUserFromTeam">Remove User</button>
                </div>

                <!-- Assigned Users -->
                <div class="d-flex flex-column col-4">
                    <label class="form-label">Assigned Users:</label>
                    <div class="border p-2 scrollable-list-container">
                        @if (IsLoadingAssignedUsers)
                        {
                            <LoadingIndicator Message="Loading team members..." IsDark="false" />
                        }
                        else if (!assignedUsers.Any())
                        {
                            <p class="text-muted">No assigned users.</p>
                        }
                        else
                        {
                            <ul class="list-group">
                                @foreach (var user in assignedUsers)
                                {
                                    <li class="list-group-item @(selectedAssignedUsers.Contains(user) ? "active" : "")"
                                        @onclick="@(() => ToggleAssignedUserSelection(user))">
                                        @user.UserName
                                    </li>
                                }
                            </ul>
                        }
                    </div>
                </div>
            </div>
        </div>

    </div>

    <!-- Save and Cancel Buttons -->
    <div class="mt-3">
        <button class="btn btn-primary" @onclick="SaveTeam">Save Team</button>
        <button class="btn btn-secondary ms-2" @onclick="() => OnClose.InvokeAsync()">Cancel</button>
    </div>
</div>

@code {
    [Parameter] public string CompanyId { get; set; }
    [Parameter] public bool NewTeam { get; set; }
    [Parameter] public TeamDTO? Team { get; set; }
    [Parameter] public EventCallback<ApiNotificationResultVM> OnClose { get; set; }

    private string teamName = string.Empty;
    private string teamDescription = string.Empty;
    private ApiNotificationResultVM? Notification;

    private List<ApplicationUserDTO> availableUsers = new();
    private List<ApplicationUserDTO> assignedUsers = new();
    private List<ApplicationUserDTO> selectedAvailableUsers = new();
    private List<ApplicationUserDTO> selectedAssignedUsers = new();

    private bool IsLoadingAvailableUsers = false;
    private bool IsLoadingAssignedUsers = false;

    protected override async Task OnInitializedAsync()
    {
        IsLoadingAssignedUsers = true;
        IsLoadingAvailableUsers = true;
        if (Team != null && Team.Id != null)
        {
            teamName = Team.TeamName;
            teamDescription = Team.TeamDescription ?? string.Empty;
            assignedUsers = await TeamsManagementService.GetUsersForTeamAsync(Team.Id);
        }
        IsLoadingAssignedUsers = false;
        var allCompanyUsers = await UserManagementService.GetUsersForCompanyAsync(CompanyId);
        IsLoadingAvailableUsers = false;
        availableUsers = allCompanyUsers
            .Where(u => !assignedUsers.Any(au => au.Id == u.Id))
            .ToList();
    }

    private void ToggleAvailableUserSelection(ApplicationUserDTO user)
    {
        if (selectedAvailableUsers.Contains(user))
            selectedAvailableUsers.Remove(user);
        else
            selectedAvailableUsers.Add(user);
    }

    private void ToggleAssignedUserSelection(ApplicationUserDTO user)
    {
        if (selectedAssignedUsers.Contains(user))
            selectedAssignedUsers.Remove(user);
        else
            selectedAssignedUsers.Add(user);
    }

    private void AddUserToTeam()
    {
        foreach (var user in selectedAvailableUsers.ToList())
        {
            assignedUsers.Add(user);
            availableUsers.Remove(user);
        }
        selectedAvailableUsers.Clear();
    }

    private void RemoveUserFromTeam()
    {
        foreach (var user in selectedAssignedUsers.ToList())
        {
            availableUsers.Add(user);
            assignedUsers.Remove(user);
        }
        selectedAssignedUsers.Clear();
    }

    private async Task SaveTeam()
    {
        if (NewTeam)
        {
            Notification = await TeamsManagementService.AddTeamToCompanyAsync(CompanyId, teamName, teamDescription, assignedUsers);
        }
        else if (Team != null)
        {
            Team.TeamName = teamName;
            Team.TeamDescription = teamDescription;
            Team.AssignedUsersDTO = assignedUsers;
            Notification = await TeamsManagementService.UpdateTeamAsync(Team);
        }
        await OnClose.InvokeAsync(Notification);
    }
}