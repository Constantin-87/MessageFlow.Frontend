@attribute [Authorize(Roles = "Admin, SuperAdmin")]
@rendermode RenderMode.InteractiveWebAssembly
@using System.ComponentModel.DataAnnotations
@inject UserManagementService UserManagementService
@inject CompanyManagementService CompanyManagementService
@inject NavigationManager NavigationManager

@if (ApplicationUser is not null)
{
    <EditForm Model="ApplicationUser" OnValidSubmit="HandleSubmit" FormName="AddEditUserForm">
        <h3>
            @Title
        </h3>
        @if (IsEditMode)
        {
            <input type="hidden" name=" ApplicationUser.Id" value="@ApplicationUser.Id" />
        }

        <DataAnnotationsValidator />

        <div class="form-floating mb-3">
            <InputSelect Value="@ApplicationUser.CompanyId"
                         ValueChanged="@((string value) => OnCompanyChanged(value))"
                         ValueExpression="() => ApplicationUser.CompanyId"
                         class="form-control"
                         disabled="@(companies.Count == 1)">
                <option value="">Select a Company</option>
                @foreach (var company in companies)
                {
                    <option value="@company.Id">@company.CompanyName</option>
                }
            </InputSelect>
            <label for="company">Company</label>
            <ValidationMessage For="() => ApplicationUser.CompanyId" class="text-danger" />
        </div>


        <!-- Username -->
        <div class="form-floating mb-3">
            <InputText @bind-Value="ApplicationUser.UserName" class="form-control" placeholder="Enter Username" />
            <label for="username">Username</label>
            <ValidationMessage For="() => ApplicationUser.UserName" class="text-danger" />
        </div>

        <!-- Email -->
        <div class="form-floating mb-3">
            <InputText @bind-Value="ApplicationUser.UserEmail" class="form-control" placeholder="Enter Email" />
            <label for="email">Email</label>
            <ValidationMessage For="() => ApplicationUser.UserEmail" class="text-danger" />
        </div>

        <!-- Phone Number -->
        <div class="form-floating mb-3">
            <InputText @bind-Value="ApplicationUser.PhoneNumber" class="form-control" placeholder="Enter Phone Number" />
            <label for="phoneNumber">Phone Number</label>
            <ValidationMessage For="() => ApplicationUser.PhoneNumber" class="text-danger" />
        </div>

        <!-- Password -->
        <div class="form-floating mb-3">
            <InputText @bind-Value="ApplicationUser.NewPassword"
                       type="password"
                       class="form-control"
                       placeholder="Enter Password"
                       autocomplete="new-password" />
            <label for="password">Password</label>
            <ValidationMessage For="() => ApplicationUser.NewPassword" class="text-danger" />
        </div>

        <!-- Role Dropdown -->
        <div class="form-floating mb-3">
            <InputSelect @bind-Value="ApplicationUser.Role" class="form-control">
                <option value="">Select a Role</option>
                @foreach (var role in displayedRoles)
                {
                    <option value="@role">@role</option>
                }
            </InputSelect>
            <label for="role">Role</label>
            <ValidationMessage For="() => ApplicationUser.Role" class="text-danger" />
        </div>

        <!-- Lockout Checkbox -->
        <div class="form-check mb-3">
            <InputCheckbox @bind-Value="ApplicationUser.LockoutEnabled" class="form-check-input" id="lockoutEnabled" />
            <label class="form-check-label" for="lockoutEnabled">Lockout Enabled</label>
        </div>

        <button type="submit" class="btn btn-primary">Submit</button>
    </EditForm>
}

@code {

    [Parameter]
    public bool IsEditMode { get; set; } = false;
    [Parameter]
    public string UserId { get; set; }
    [Parameter]
    public EventCallback<ApiNotificationResultVM> OnValidSubmit { get; set; }

    private string Title => IsEditMode ? $"Edit User {ApplicationUser.UserName}" : "Create New User";

    private ApplicationUserDTO ApplicationUser = new();
    private List<CompanyDTO> companies = new();
    private List<string> availableRoles = new();
    private List<string> displayedRoles = new();

    protected override async Task OnInitializedAsync()
    {

        companies = await CompanyManagementService.GetAllCompaniesAsync();
        var firstCompanyId = companies.First().Id;

        // When in edit mode, fetch the user data and prepopulate fields
        if (IsEditMode && !string.IsNullOrEmpty(UserId))
        {
            ApplicationUser = await UserManagementService.GetUserByIdAsync(UserId);
            if (ApplicationUser == null)
            {
                await OnValidSubmit.InvokeAsync(new ApiNotificationResultVM
                    {
                        IsSuccess = false,
                        Message = "User not found"
                    });
                return;
            }

            ApplicationUser.CompanyDTO = companies.FirstOrDefault(c => c.Id == ApplicationUser.CompanyId);
        }
        else if (!IsEditMode && !string.IsNullOrEmpty(firstCompanyId))
        {
            ApplicationUser.CompanyId = firstCompanyId;
            ApplicationUser.CompanyDTO = companies.First();
        }

        if (!string.IsNullOrEmpty(ApplicationUser.CompanyId))
        {
            UpdateSuperAdminRole();
        }

        availableRoles = await UserManagementService.GetAvailableRolesAsync();
        // Remove SuperAdmin role if logged-in user is not a SuperAdmin or selected company is not MessageFlow
        UpdateSuperAdminRole();
    }

    private async Task HandleSubmit()
    {
        try
        {
            ApiNotificationResultVM result;

            if (!IsEditMode)
            {
                // Create user
                result = await UserManagementService.CreateUserAsync(ApplicationUser);
            }
            else
            {
                // Update user
                result = await UserManagementService.UpdateUserAsync(ApplicationUser);
            }

            await Task.Delay(2000);
            if (OnValidSubmit.HasDelegate)
            {
                await OnValidSubmit.InvokeAsync(result);
            }

        }
        catch (Exception ex)
        {
            await OnValidSubmit.InvokeAsync(new ApiNotificationResultVM
                {
                    IsSuccess = false,
                    Message = "An unexpected error occurred. Please try again."
                });
        }
    }

    private void UpdateSuperAdminRole()
    {
        const string superAdminCompanyId = "e68116f4-1588-4987-b4ab-c3a487200c25"; /// TO BE CHANGED TO GET IT FROM BACKEND

        displayedRoles = new List<string>(availableRoles);

        if (ApplicationUser.CompanyId != superAdminCompanyId)
        {
            // Remove "SuperAdmin" if company doesn't match
            displayedRoles.Remove("SuperAdmin");
        }
        else
        {
            // Add the original roles returned from the server
            if (!displayedRoles.Contains("SuperAdmin"))
            {
                displayedRoles = new List<string>(availableRoles);
            }
        }
        StateHasChanged();
    }

    private void OnCompanyChanged(string value)
    {
        ApplicationUser.CompanyId = value;
        ApplicationUser.CompanyDTO = companies.FirstOrDefault(c => c.Id == value);
        UpdateSuperAdminRole();
    }
}